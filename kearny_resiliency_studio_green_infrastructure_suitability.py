# -*- coding: utf-8 -*-
"""Kearny - Resiliency Studio - Green Infrastructure Suitability.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_tbykvjQPuCQpXwisYrsPI20MXgxqafB

#Setup
"""

from google.colab.output import eval_js
eval_js('google.colab.output.setIframeHeight("100")') # limits the height of output so it doesn't take up the whole notebook screen

!pip install pygeos census geopandas mapclassify contextily adjustText # Install geopandas and mapclassify (used for interactive mapping)

import pygeos
import pandas as pd
import geopandas as gpd
import matplotlib as mpl
import folium
from matplotlib import pyplot as plt
import matplotlib.patheffects as pe
import mapclassify
from census import Census
import contextily as ctx 
import requests
from adjustText import adjust_text
import numpy as np

plt.rcParams["figure.figsize"] = (10,10) # set this once for a default plot size

from google.colab import drive #  mounts Google Drive
drive.mount('/drive')

c = Census("") # initialize the Census API without an API key (won't approach the limit)

"""#Import and Format Files"""

#Drainage Areas
cso_drainage_areas = gpd.read_file('/drive/My Drive/Resiliency Studio - Suitability Webmap/CSODrainageAreas.shp')
cso_drainage_areas = cso_drainage_areas[['Drainage_A','geometry']]
cso_drainage_areas_webm = cso_drainage_areas.to_crs('EPSG:4326')

#Existing/planned GI
existing_gi = gpd.read_file('/drive/My Drive/Resiliency Studio - Suitability Webmap/ExistingGI.shp')
existing_gi_webm = existing_gi.to_crs('EPSG:4326')

#Public Spaces
public_spaces = gpd.read_file('/drive/My Drive/Resiliency Studio - Suitability Webmap/PublicSpacesInfo.shp')

#clean up names
public_spaces.loc[(public_spaces["Address"] == '131 Midland Ave'),"Site_Name"] = 'Hudson Arts and Science Charter School - Elementary'
public_spaces.loc[(public_spaces["Address"] == '114 Chestnut St'),"Site_Name"] = 'Hudson Arts and Science Charter School - Middle'
public_spaces.loc[(public_spaces["Site_Name"] == 'West Hudson Hos[ital Parking'),"Site_Name"] = 'West Hudson Hospital Parking'

#Public space scores
public_spaces_scores = gpd.read_file('/drive/My Drive/Resiliency Studio - Suitability Webmap/MeanScoresasTableUpdate.csv')
public_spaces_scores.loc[(public_spaces_scores["Site_Name"] == 'West Hudson Hos[ital Parking'),"Site_Name"] = 'West Hudson Hospital Parking'

public_spaces_mean_scores = public_spaces_scores[['Site_Name','MEAN','MAJORITY','MIN']]

#Join public space scores to info
public_spaces_scored = public_spaces.merge(public_spaces_mean_scores,how="left",left_on = "Site_Name",right_on = "Site_Name")
public_spaces_scored = public_spaces_scored[['Site_Name','Site_Type','MEAN','MAJORITY','MIN','geometry']]
#Assign rank based on score
public_spaces_scored['score_float'] = public_spaces_scored['MEAN'].apply(lambda x: float(x))
public_spaces_scored['rank'] = public_spaces_scored[["score_float","MAJORITY",'MIN']].apply(tuple,axis=1).rank(method='dense',ascending=False).astype(int)
public_spaces_scored['score_rounded'] = public_spaces_scored['score_float'].round(decimals=2)
public_spaces_scored_webm = public_spaces_scored.to_crs('EPSG:4326')
#Subdivide into individual site types
parks_scored_webm = public_spaces_scored_webm[public_spaces_scored_webm['Site_Type']=='Park']
schools_scored_webm = public_spaces_scored_webm[public_spaces_scored_webm['Site_Type']=='School']
parkinglots_scored_webm = public_spaces_scored_webm[public_spaces_scored_webm['Site_Type']=='Parking Lot']

#Streets
streets_scored = gpd.read_file('/drive/My Drive/Resiliency Studio - Suitability Webmap/StreetsScored.shp')
streets_scored['length_in_feet'] = streets_scored['geometry'].length
streets_scored_webm = streets_scored.to_crs('EPSG:4326')
#Label with name and address range for mapping
streets_scored_webm['FROMADDR_MAX'] = streets_scored_webm[['FROMADDR_L','FROMADDR_R']].max(axis=1)
streets_scored_webm['TOADDR_MAX'] = streets_scored_webm[['TOADDR_L','TOADDR_R']].max(axis=1)
streets_scored_webm['DETAILED_NAME'] = streets_scored_webm['FROMADDR_MAX'].astype(str) + " to " + streets_scored_webm['TOADDR_MAX'].astype(str) + " " + streets_scored_webm['PRIMENAME']
streets_scored_webm.loc[(streets_scored_webm["FROMADDR_MAX"] == 0),"DETAILED_NAME"] = streets_scored_webm['PRIMENAME']
streets_scored_webm.loc[(streets_scored_webm["FROMADDR_MAX"] == 0),"DETAILED_NAME"] = streets_scored_webm['PRIMENAME']

high_ranked_streets_webm = streets_scored_webm[streets_scored_webm['gridcode'] > 7]

kearny_poc_sp = gpd.read_file('/drive/My Drive/Resiliency Studio - Suitability Webmap/kearny_poc.zip')
kearny_poc_webm = kearny_poc_sp.to_crs(4326)
kearny_inc_sp = gpd.read_file('/drive/My Drive/Resiliency Studio - Suitability Webmap/kearny_inc.zip')
kearny_inc_webm = kearny_inc_sp.to_crs(4326)

"""#Map"""

x_map=cso_drainage_areas_webm.centroid.x.mean()
y_map=cso_drainage_areas_webm.centroid.y.mean()

webmap = folium.Map(location=[y_map, x_map], zoom_start=14, tiles=None)
folium.TileLayer('CartoDB positron', name='Street Map', min_zoom=12, control=True).add_to(webmap)
folium.TileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', attr = "Esri", name='Satellite View', opacity=0.5, min_zoom=12, control=True).add_to(webmap)
# Added a satellite view and set min_zoom above

#Parks
parks = folium.FeatureGroup(name='Parks',control=True)

for _, r in parks_scored_webm.iterrows():
    sim_geo = gpd.GeoSeries(r['geometry'])
    geo_j = sim_geo.to_json()
    geo_j = folium.GeoJson(data=geo_j,
                           style_function=lambda x: {'fillColor': 'green', # fill color
                                                     'color': 'green', # line color
                                                     'weight': 1}) # line width
    folium.Popup('Name: {} <br> Score: {} <br> Ranking (out of all sites): {}'.format(r['Site_Name'],r['score_rounded'],r['rank']),max_width = 400).add_to(geo_j) 
    folium.Tooltip(r['Site_Name'],opacity = 1).add_to(geo_j) 
    geo_j.add_to(parks)

parks.add_to(webmap)

#Schools
schools = folium.FeatureGroup(name='Schools',control=True)

for _, r in schools_scored_webm.iterrows():
    sim_geo = gpd.GeoSeries(r['geometry'])
    geo_j = sim_geo.to_json()
    geo_j = folium.GeoJson(data=geo_j,
                           style_function=lambda x: {'fillColor': 'blue', # fill color
                                                     'color': 'blue', # line color
                                                     'weight': 1}) # line width
    folium.Popup('Name: {} <br> Score: {} <br> Ranking (out of all sites): {}'.format(r['Site_Name'],r['score_rounded'],r['rank']),max_width = 400).add_to(geo_j)
    folium.Tooltip(r['Site_Name'],opacity = 1).add_to(geo_j) 
    geo_j.add_to(schools)

schools.add_to(webmap)

#Parking Lots
parkinglots = folium.FeatureGroup(name='Parking Lots',control=True)

for _, r in parkinglots_scored_webm.iterrows():
    sim_geo = gpd.GeoSeries(r['geometry'])
    geo_j = sim_geo.to_json()
    geo_j = folium.GeoJson(data=geo_j,
                           style_function=lambda x: {'fillColor': 'black', # fill color
                                                     'color': 'black', # line color
                                                     'weight': 1,
                                                     'opacity': 1})# line width

    folium.Popup('Name: {} <br> Score: {} <br> Ranking (out of all sites): {}'.format(r['Site_Name'],r['score_rounded'],r['rank']),max_width = 400).add_to(geo_j)
    folium.Tooltip(r['Site_Name'],opacity=1).add_to(geo_j) 
    geo_j.add_to(parkinglots)

parkinglots.add_to(webmap)


#Streets
streets = folium.FeatureGroup(name='All Streets',control=True)

for _, r in streets_scored_webm.iterrows():
    sim_geo = gpd.GeoSeries(r['geometry'])
    geo_j = sim_geo.to_json()
    geo_j = folium.GeoJson(data=geo_j,
                           style_function=lambda x: {'fillColor': 'black', # fill color
                                                     'color': 'black', # line color
                                                     'weight': 2},show=False)# line width

    folium.Popup('Street Name: {} <br> Score: {}'.format(r['DETAILED_NAME'],r['gridcode']),max_width = 400).add_to(geo_j) 
    folium.Tooltip(r['DETAILED_NAME'],opacity=1).add_to(geo_j) 
    geo_j.add_to(streets)

streets.add_to(webmap)

#High Ranked Streets
highstreets = folium.FeatureGroup(name='Highly Ranked Streets',control=True)

for _, r in high_ranked_streets_webm.iterrows():
    sim_geo = gpd.GeoSeries(r['geometry'])
    geo_j = sim_geo.to_json()
    geo_j = folium.GeoJson(data=geo_j,
                           style_function=lambda x: {'fillColor': 'green', # fill color
                                                     'color': 'green', # line color
                                                     'weight': 2},show=False)# line width

    folium.Popup('Street Name: {} <br> Score: {}'.format(r['DETAILED_NAME'],r['gridcode']),max_width = 400).add_to(geo_j) 
    folium.Tooltip(r['DETAILED_NAME'],opacity=1).add_to(geo_j) 
    geo_j.add_to(highstreets)

highstreets.add_to(webmap)

#Percent People of Color
kearny_poc = gpd.GeoSeries(kearny_poc_webm.set_index('GEOID')['geometry']).to_json()

poc_2020_choro = folium.Choropleth(
    geo_data=kearny_poc,
    name="Percent People of Color",
    data=kearny_poc_webm,
    columns=["GEOID", "Percent_no"],
    key_on="feature.id",
    fill_color="Reds",
    fill_opacity=0.8,
    line_opacity=0.5,
    show=False,
    highlight=False,
    legend_name="Percent People of Color",
)
poc_2020_choro.add_to(webmap)

#Median Income
kearny_inc = gpd.GeoSeries(kearny_inc_webm.set_index('GEOID')['geometry']).to_json()

inc_2019_choro = folium.Choropleth(
    geo_data=kearny_inc,
    name="Median Income",
    data=kearny_inc_webm,
    columns=["GEOID", "B19013_001"],
    key_on="feature.id",
    fill_color="RdPu",
    fill_opacity=0.8,
    line_opacity=0.5,
    show=False,
    highlight=False,
    legend_name="Median Income",
)
inc_2019_choro.add_to(webmap)

webmap.keep_in_front(parks, schools, parkinglots, streets, highstreets) #Assures that sites and streets don't accidentally get stuck behind choropleths

folium.LayerControl(collapsed=False).add_to(webmap)
#webmap
webmap.save('/drive/My Drive/Resiliency Studio - Suitability Webmap/kearny_gi_webmap.html')



